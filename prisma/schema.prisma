// Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Models
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  password      String?      // For beta users
  image         String?
  totalPoints   Int          @default(0)
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  predictions   Prediction[]
}

// F1 Penca Models
enum UserRole {
  USER
  ADMIN
}

model Driver {
  id          String  @id
  number      Int     @unique
  code        String  @unique
  firstname   String
  lastname    String
  fullname    String
  nationality String
  team        String
  active      Boolean @default(true)
}

model Race {
  id              String       @id @default(cuid())
  name            String
  round           Int
  circuit         String
  date            DateTime
  deadline        DateTime?    // Prediction deadline (1 hour before qualifying/sprint qualifying)
  season          Int
  status          RaceStatus   @default(UPCOMING)
  hasSprint       Boolean      @default(false)
  resultsImported Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  predictions     Prediction[]
  results         RaceResult[]
}

enum RaceStatus {
  UPCOMING
  LIVE
  COMPLETED
}

model Prediction {
  id                    String   @id @default(cuid())
  userId                String
  raceId                String
  positions             Json     // Store ordered array of driver positions for main race
  polePositionPrediction String? // Driver code prediction for pole position
  fastestLapPrediction   String? // Driver code prediction for fastest lap
  sprintPositions        Json?   // Store ordered array of driver positions for sprint race
  sprintPolePrediction   String? // Driver code prediction for sprint pole position
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  points                Int      @default(0)
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  race                  Race     @relation(fields: [raceId], references: [id], onDelete: Cascade)
}

model RaceResult {
  id                 String   @id @default(cuid())
  raceId             String
  polePosition       String? // Driver code for pole position
  raceResult         Json    // Store race results array with positions
  fastestLap         String? // Driver code for fastest lap
  sprintRace         Boolean  @default(false)
  sprintPolePosition String? // Driver code for sprint pole position
  sprintResult       Json?   // Store sprint results array with positions
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  race               Race     @relation(fields: [raceId], references: [id], onDelete: Cascade)
}
